name: $(Date:yyyy.MM.dd).$(Rev:rr)

trigger:
  branches:
    include:
      - main
      - topic/*

pr:
  - main

variables:
  - group: ExternalServiceSecrets
  - name: ProductName
    value: SYNCHRO EVM
  - name: ShortCode
    value: EVM
  - name: GPR_ProductID
    value: 3579
  - name: Mend.ApiKey
    value: $(MendApiKey)
  - name: Mend.UserKey
    value: $(MendServiceAccountKey)
  - name: Mend.UserEmail
    value: $(MendServiceAccountEmail)
  - name: VeracodeAppProfile
    value: $(ProductName) - WebApi ($(ShortCode) - $(GPR_ProductID))
  - name: DotNetVersion
    value: 9.x
  - name: DockerCachePath
    value: $(Pipeline.Workspace)/.docker-cache
  - name: DockerArtifactName
    value: docker
  - name: DockerImage.RegistryConnection
    value: Bentley CONNECT ACR
  - name: DockerImage.RegistryHostname
    value: bentleyconnectprodacr01.azurecr.io
  - name: DockerImage.RepositoryName
    value: synchro-evm
  - name: DockerImage.Tag
    value: $(Build.BuildNumber)

resources:
  repositories:
    - repository: MendScan
      type: git
      name: ReleaseServices/MendScan
      ref: refs/heads/main

pool:
  vmImage: ubuntu-latest

jobs:
  - job: DockerBuild
    displayName: Docker Build
    timeoutInMinutes: 30
    cancelTimeoutInMinutes: 5
    steps:
      - task: Cache@2
        inputs:
          key: docker | "$(Agent.OS)" | ./Dockerfile | ./Directory.Packages.props
          restoreKeys: |
            docker | "$(Agent.OS)" | ./Dockerfile
            docker | "$(Agent.OS)"
          path: $(DockerCachePath)

      - script: |
          set -euo pipefail
          docker buildx create --use default
          docker buildx build \
            --cache-from=type=local,src="$(DockerCachePath)" \
            --cache-to=type=local,dest="$(DockerCachePath)",mode=max \
            --secret id=FEED_ACCESS_TOKEN \
            --build-arg Version="$(Build.BuildNumber)" \
            --load --tag "$(DockerImage.RegistryHostname)/$(DockerImage.RepositoryName):$(DockerImage.Tag)" \
            .
        displayName: Build image
        env:
          DOCKER_BUILDKIT: '1'
          BUILDKIT_PROGRESS: 'plain'
          FEED_ACCESS_TOKEN: $(System.AccessToken)

      - script: docker image save "$(DockerImage.RegistryHostname)/$(DockerImage.RepositoryName):$(DockerImage.Tag)" -o image.tar
        displayName: Save image

      - publish: image.tar
        displayName: Publish artifact
        artifact: $(DockerArtifactName)

  - job: DockerPush
    displayName: Docker Push
    timeoutInMinutes: 30
    cancelTimeoutInMinutes: 5
    dependsOn:
      - DockerBuild
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    steps:
      - download: current
        displayName: Download artifact
        artifact: $(DockerArtifactName)

      - script: docker image load --input '$(Pipeline.Workspace)/$(DockerArtifactName)/image.tar'
        displayName: Load image

      - task: Docker@2
        displayName: Login to registry
        inputs:
          containerRegistry: $(DockerImage.RegistryConnection)
          command: login

      - task: Docker@2
        displayName: Push image
        inputs:
          command: push
          containerRegistry: $(DockerImage.RegistryConnection)
          repository: $(DockerImage.RepositoryName)
          tags: |
            $(DockerImage.Tag)

  - job: Build
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    displayName: Build solution
    timeoutInMinutes: 30
    cancelTimeoutInMinutes: 5
    steps:
      - task: UseDotNet@2
        displayName: 'Use .NET SDK'
        inputs:
          packageType: sdk
          version: $(DotNetVersion)

      - task: NuGetAuthenticate@1
        displayName: 'NuGet Authenticate'
        inputs:
          forceReinstallCredentialProvider: true

      - task: DotNetCoreCLI@2
        displayName: Build solution
        inputs:
          command: build
          projects: '**/*.sln'
          arguments: '-c Release'

      - task: CopyFiles@2
        inputs:
          targetFolder: $(Build.ArtifactStagingDirectory)

      - task: PublishBuildArtifacts@1
        displayName: Publish built artifacts
        inputs:
          artifactName: built_artifacts
          pathToPublish: $(Build.ArtifactStagingDirectory)

  - job: Run_Tests
    displayName: Run Tests
    timeoutInMinutes: 30
    cancelTimeoutInMinutes: 5
    steps:
      - task: UseDotNet@2
        displayName: Use .NET SDK
        inputs:
          packageType: sdk
          version: $(DotNetVersion)

      - task: NuGetAuthenticate@1
        displayName: 'NuGet Authenticate'
        inputs:
          forceReinstallCredentialProvider: true

      - task: CmdLine@2
        displayName: Set environment
        inputs:
          script: |
            .azure-pipelines/script/set-mise-env

      - task: CmdLine@2
        displayName: Start containers
        inputs:
          script: |
            script/dcl up --detach --wait postgresql elasticsearch_test

      - task: DotNetCoreCLI@2
        displayName: Run tests
        inputs:
          command: test
          arguments: >
            --collect "Code Coverage"
            --
            --report-trx
            --results-directory "$(Agent.TempDirectory)"

  - job: Check_Copyright
    displayName: Check Copyright Notice
    steps:
      - checkout: self
        fetchDepth: 0
      - script: |
          .azure-pipelines/script/check-copyright
        displayName: Check Copyright Notice

  - job: Check_Code_Formatting
    displayName: Check Code Formatting
    steps:
      - task: UseDotNet@2
        displayName: Use .NET SDK
        inputs:
          packageType: sdk
          version: $(DotNetVersion)

      - task: NuGetAuthenticate@1
        displayName: 'NuGet Authenticate'
        inputs:
          forceReinstallCredentialProvider: true

      - task: DotNetCoreCLI@2
        displayName: Install dotnet tools
        inputs:
          command: custom
          custom: tool
          arguments: restore

      - task: DotNetCoreCLI@2
        displayName: Check Code Formatting (csharpier)
        inputs:
          command: custom
          custom: csharpier
          arguments: --check .

      - task: DotNetCoreCLI@2
        displayName: Check Code Formatting (dotnet format style)
        inputs:
          command: custom
          custom: format
          arguments: style --verify-no-changes --verbosity diagnostic

      - task: DotNetCoreCLI@2
        displayName: Check Code Formatting (dotnet format analyzers)
        inputs:
          command: custom
          custom: format
          arguments: analyzers --verify-no-changes --verbosity diagnostic

  - job: MendScan
    displayName: MendScan
    dependsOn:
      - DockerBuild
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    variables:
      - name: WS_DOCKER_SCANTARFILES
        value: true
      - name: WS_DOCKER_SCANIMAGES
        value: true
    steps:
      - download: current
        displayName: Download artifact
        artifact: $(DockerArtifactName)

      - template: MendScan.yml@MendScan
        parameters:
          MendProductName: $(ProductName) ($(ShortCode) - $(GPR_ProductID))
          MendPathToScan: $(Pipeline.Workspace)/$(DockerArtifactName)
          MendConfigPath: $(Build.SourcesDirectory)/.azure-pipelines/mend/SPNG_config.json
          MendSimulateDelete: false

  - job: Veracode
    displayName: Veracode
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    steps:
      - task: UseDotNet@2
        displayName: Use .NET SDK
        inputs:
          packageType: sdk
          version: $(DotNetVersion)

      - task: NuGetAuthenticate@1
        displayName: 'NuGet Authenticate'
        inputs:
          forceReinstallCredentialProvider: true

      - task: DotNetCoreCLI@2
        displayName: Publish for Veracode
        inputs:
          command: publish
          arguments: '-o $(Build.ArtifactStagingDirectory)/veracode_artifacts'

      # https://docs.veracode.com/r/Use_YAML_to_Add_Veracode_Analysis_to_Azure_DevOps_Pipelines
      - task: Veracode@3
        inputs:
          ConnectionDetailsSelection: Service Connection
          AnalysisService: AppSec - Veracode
          veracodeAppProfile: $(VeracodeAppProfile)
          version: $(Build.BuildNumber)
          filepath: $(Build.ArtifactStagingDirectory)/veracode_artifacts
          optargs: '-include *.dll'
